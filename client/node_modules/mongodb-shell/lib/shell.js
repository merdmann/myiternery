"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const stream_1 = require("stream");
const LOGGER_PREFIX = '[MongoShell] ';
class Shell {
    constructor(workerId, mongoUri, logger) {
        this.mongoUri = mongoUri;
        this.workerId = workerId;
        if (logger) {
            this.logger = logger;
        }
        else {
            this.logger = console;
        }
        this.stdout = new stream_1.Readable({
            read() { },
        });
        this.mongo = child_process_1.exec('mongo --quiet --host ' + this.mongoUri, {
            encoding: 'utf8',
        });
        this.bindStdout();
    }
    async bindStdout() {
        await this.init();
        this.mongo.stdout.on('data', data => {
            if (data.match(/E QUERY/)) {
                this.logger.warn(LOGGER_PREFIX + 'received error ' + data);
                this.stdout.emit('error', data);
                this.stdout.emit('end');
            }
            else {
                this.stdout.emit('data', data);
                this.stdout.emit('end');
                this.logger.debug(LOGGER_PREFIX + 'received response ' + data);
            }
        });
        this.mongo.stderr.on('data', data => {
            this.logger.warn(LOGGER_PREFIX + 'received error ' + data);
            this.stdout.emit('error', data);
            this.stdout.emit('end');
        });
    }
    async init() { }
    async destroy() {
        this.mongo.kill();
        delete this.mongo;
    }
    sendCommand(command) {
        this.logger.debug(LOGGER_PREFIX + 'send command ' + command.in);
        this.mongo.stdin.write(command.in + '\n');
    }
}
exports.Shell = Shell;
