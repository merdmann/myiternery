{"ast":null,"code":"var _jsxFileName = \"/home/merdmann/deveop/myiternery/client/src/pages/itineraries.js\";\nimport React from \"react\";\nimport { Component } from \"react\";\nimport Activity from \"../components/activity\";\nimport styles from \"../pages/itinararies.css\";\nimport Carousel from 'react-images';\n/* \n * This comonent is expected to take the city name from http route and tto \n * list all iternararies for this city\n */\n\nclass Itinararies extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itinararies: null,\n      urls: null\n    };\n  }\n\n  createUrls() {\n    let landmarks = this.state.itinararies.map(e => e.landmarks);\n    let urls = [];\n    landmarks.map(lm => {\n      return lm.forEach(element => {\n        urls.push({\n          src: element.url\n        });\n      });\n    });\n    console.log(landmarks);\n    console.log(urls);\n    this.setState({\n      urls\n    });\n  }\n\n  render() {\n    return this.state.itinararies && this.state.itinararies.map(i => React.createElement(\"div\", {\n      className: \"InfoBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, i.creator.name), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, i.description), React.createElement(\"span\", {\n      className: \"infoText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Likes:\", i.liked), React.createElement(\"span\", {\n      className: \"infoText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Duration \", i.duration, \"hrs \"), React.createElement(\"span\", {\n      className: \"infoText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Cost \", i.cost, \"$\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"infoText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, i.activity.map(t => React.createElement(\"span\", {\n      className: \"tags\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"#\" + t))), React.createElement(\"div\", {\n      className: \"infoText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, i.landmarks.map(l => React.createElement(\"span\", {\n      className: \"tags\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, l.name))), this.state.urls && React.createElement(Carousel, {\n      className: \"infoText\",\n      views: this.state.urls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), \")\"));\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:5000/api/tinerary/search?city=\" + this.props.match.params.city).then(response => response.json()).then(data => {\n      console.log(data);\n      this.setState({\n        itinararies: data\n      });\n      this.createUrls();\n    });\n  }\n\n}\n/* class */\n\n\nexport default Itinararies;\n/* last line */","map":{"version":3,"sources":["/home/merdmann/deveop/myiternery/client/src/pages/itineraries.js"],"names":["React","Component","Activity","styles","Carousel","Itinararies","constructor","props","state","itinararies","urls","createUrls","landmarks","map","e","lm","forEach","element","push","src","url","console","log","setState","render","i","creator","name","description","liked","duration","cost","activity","t","l","componentDidMount","fetch","match","params","city","then","response","json","data"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Component } from \"react\";\nimport Activity from \"../components/activity\"\nimport styles from \"../pages/itinararies.css\"\nimport Carousel from 'react-images';\n\n/* \n * This comonent is expected to take the city name from http route and tto \n * list all iternararies for this city\n */\n\nclass Itinararies extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {itinararies: null, \n      urls: null\n    }\n  }\n\n  createUrls(){\n    let landmarks=this.state.itinararies.map(e => e.landmarks)\n    let urls = [] \n    landmarks.map(lm => {return lm.forEach(element => {\n         urls.push({src :element.url})      \n        })\n    })\n    console.log(landmarks)\n    console.log(urls)\n    this.setState({urls})\n  }\n\n  render() {\n    return ( this.state.itinararies && this.state.itinararies.map(i=> \n        <div className=\"InfoBox\">\n        <div>{i.creator.name}</div>\n        <h3>{i.description}</h3>\n        <span className=\"infoText\">Likes:{i.liked}</span>\n        <span className=\"infoText\">Duration {i.duration}hrs </span>\n        <span className=\"infoText\">Cost {i.cost}$</span><br></br>\n        <span className=\"infoText\">{i.activity.map(t=><span className=\"tags\">{\"#\"+t}</span>)}</span>\n        <div className=\"infoText\">{i.landmarks.map( l => <span className=\"tags\">{l.name}</span>)}</div>\n        {this.state.urls &&  <Carousel  className=\"infoText\" views={this.state.urls}/>}\n      )\n      </div> ));\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:5000/api/tinerary/search?city=\" + this.props.match.params.city )\n      .then(response =>response.json())\n      .then(data => {\n        console.log(data);\n        this.setState({itinararies: data })\n        this.createUrls()\n      });\n  };\n\n} /* class */\n\nexport default Itinararies;\n/* last line */"]},"metadata":{},"sourceType":"module"}